# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout
      - run:
          # https://circleci.com/docs/ja/2.0/docker-compose/
          name: install docker-compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
      - run:
          name: build docker image
          # https://discuss.circleci.com/t/2-1-config-and-build-processing/24102/31
          command: |
            cat .env.sample | \
            # sed 's/IMAGE_VER=.*/IMAGE_VER=v0.0.0/' | \
            sed 's/GIN_MODE=.*/GIN_MODE={{REPO_NAME}}/' | \
            sed 's/SECRET=.*/SECRET={{SECRET}}/' | \
            sed 's/DOMAIN=.*/DOMAIN={{DOMAIN}}/' | \
            sed 's/PORT=.*/PORT={{PORT}}/' \
            > .env
            /usr/local/bin/docker-compose build

  deploy:
    machine: true
    steps:
      - checkout

      - run: git config user.email "circleci@example.com"
      - run: git config user.name "circleci"
      # change MAJOR.MINOR with your hand(PATCH is auto increments)
      - run: export IMAGE_VER=$(grep IMAGE_VER= .env.sample | cut -d '=' -f 2)
      - run:
          name: If tag hasn't been created, it will be created and pushed
          command: |
            [[ $(git tag -l "$IMAGE_VER") == '' ]] && git tag -a $IMAGE_VER -m "new docker image"

      - add_ssh_keys:
          fingerprints:
            - "38:61:56:90:7c:42:a5:ed:3d:2c:14:1b:4a:4c:72:83"
      - run:
          name: Kick the deploy shell in remote host
          command: |
            ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "export IMAGE_VER=\"$IMAGE_VER\"; ~/$CIRCLE_PROJECT_REPONAME/deploy.sh"

orbs:
  slack: circleci/slack@3.4.2
version: 2.1
workflows:
  build:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - slack/approval-notification:
          message: deploy done
          webhook: $SLACK_WEBHOOK
          requires:
            - deploy
